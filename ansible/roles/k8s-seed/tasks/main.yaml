- name: Install "helm" cli
  become: true
  community.general.snap:
    name: helm
    classic: true

- name: install pre-requisites for k8s ansible in the virtual environment
  become: true
  pip:
    name:
      - openshift
      - pyyaml
      - kubernetes

- name: Check if the onepassword-connect-credentials secret exists
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    namespace: onepassword
    name: onepassword-connect-credentials
  register: secret_facts

- name: Read 1Password credentials
  command: op read "op://sg-k8s/byte-haven-1password-credentials-file/1password-credentials.json"
  register: op_json
  delegate_to: localhost
  when: secret_facts.resources | length == 0

- name: Read 1Password credentials
  command: op read "op://sg-k8s/byte-haven-1password-token/credential"
  register: op_token
  delegate_to: localhost
  when: secret_facts.resources | length == 0

- name: Create the onepassword namespace
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: onepassword
  when: secret_facts.resources | length == 0

- name: Create onepassword-connect-credentials secret
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: onepassword-connect-credentials
        namespace: onepassword
      data:
        1password-credentials.json: "{{ op_json.stdout | b64encode | b64encode }}" # for some odd reason we have to do this twice. unsure why still
  when: secret_facts.resources | length == 0

- name: Create the external-secrets namespace
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: external-secrets
  when: secret_facts.resources | length == 0

- name: Create onepassword-connect-token secret
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: onepassword-connect-token
        namespace: external-secrets
      data:
        token: "{{ op_token.stdout | b64encode }}"
  when: secret_facts.resources | length == 0

- name: Add stable chart repo
  kubernetes.core.helm_repository:
    name: argocd
    repo_url: "https://argoproj.github.io/argo-helm"

- name: Deploy ArgoCD using helm
  kubernetes.core.helm:
    name: argocd
    chart_ref: argocd/argo-cd
    release_namespace: argocd
    chart_version: "7.6.12"
    create_namespace: true
  when: secret_facts.resources | length == 0

- name: Create ArgoCD Application for base
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: argoproj.io/v1alpha1
      kind: Application
      metadata:
        name: base
        namespace: argocd
        annotations:
          argocd.argoproj.io/sync-wave: "1"
      spec:
        syncPolicy:
          automated:
            prune: true
            selfHeal: true
        project: default
        source:
          repoURL: https://github.com/xorima/byte-haven.git
          targetRevision: HEAD
          path: k8s/envs/sg/base
        destination:
          server: https://kubernetes.default.svc
          namespace: argocd
